<?php

declare(strict_types=1);

namespace Tests\Daniel\Library\Application\Update;

use Medine\Daniel\Library\Application\Find\BookNotExistsException;
use Medine\Daniel\Library\Application\Update\BookUpdater;
use Medine\Daniel\Library\Domain\Contracts\BookRepository;
use PHPUnit\Framework\TestCase;
use Tests\Daniel\Library\Domain\BookMother;

final class BookUpdaterTest extends TestCase
{
    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        \Mockery::close();
    }

    /**
     * @test
     */
    public function itShouldUpdateAValidBook(): void
    {
        $book       = BookMother::random();
        $request    = BookUpdaterRequestMother::fromEntity($book);
        $repository = \Mockery::mock(BookRepository::class);
        $updater    = new BookUpdater($repository);

        $repository->shouldReceive('find')
            ->with($book->id())
            ->once()
            ->andReturn($book);

        $repository->shouldReceive('update')
            ->once()
            ->andReturnNull();

        ($updater)($request);
    }

    /**
     * @test
     */
    public function itShouldThrowBookNotFoundException(): void
    {
        $request    = BookUpdaterRequestMother::random();
        $repository = \Mockery::mock(BookRepository::class);
        $updater    = new BookUpdater($repository);

        $repository->shouldReceive('find')
            ->with($request->id())
            ->once()
            ->andReturnNull();

        $this->expectException(BookNotExistsException::class);

        ($updater)($request);
    }
}
